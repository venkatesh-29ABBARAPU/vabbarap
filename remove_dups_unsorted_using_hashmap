#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define HASH_SIZE 1000

// Linked list node structure
typedef struct ListNode {
    int data;
    struct ListNode* next;
} ListNode;

// Hash table node structure
typedef struct HashNode {
    int key;
    struct HashNode* next;
} HashNode;

// Hash table structure
typedef struct {
    HashNode* buckets[HASH_SIZE];
} HashMap;

// Hash function
int hash(int key) {
    return abs(key) % HASH_SIZE;
}

// Initialize hash map
void initHashMap(HashMap* map) {
    for (int i = 0; i < HASH_SIZE; i++) {
        map->buckets[i] = NULL;
    }
}

// Check if key exists in hash map
bool contains(HashMap* map, int key) {
    int index = hash(key);
    HashNode* current = map->buckets[index];
    
    while (current != NULL) {
        if (current->key == key) {
            return true;
        }
        current = current->next;
    }
    return false;
}

// Insert key into hash map
void insert(HashMap* map, int key) {
    if (contains(map, key)) {
        return; // Key already exists
    }
    
    int index = hash(key);
    HashNode* newNode = (HashNode*)malloc(sizeof(HashNode));
    newNode->key = key;
    newNode->next = map->buckets[index];
    map->buckets[index] = newNode;
}

// Free hash map memory
void freeHashMap(HashMap* map) {
    for (int i = 0; i < HASH_SIZE; i++) {
        HashNode* current = map->buckets[i];
        while (current != NULL) {
            HashNode* temp = current;
            current = current->next;
            free(temp);
        }
        map->buckets[i] = NULL;
    }
}

// Create a new list node
ListNode* createNode(int data) {
    ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Insert at the beginning of linked list
void insertAtHead(ListNode** head, int data) {
    ListNode* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

// Insert at the end of linked list
void insertAtTail(ListNode** head, int data) {
    ListNode* newNode = createNode(data);
    
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    ListNode* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

// Remove duplicates from linked list using hashmap
void removeDuplicates(ListNode** head) {
    if (*head == NULL) {
        return;
    }
    
    HashMap map;
    initHashMap(&map);
    
    ListNode* current = *head;
    ListNode* prev = NULL;
    
    while (current != NULL) {
        if (contains(&map, current->data)) {
            // Duplicate found, remove current node
            prev->next = current->next;
            free(current);
            current = prev->next;
        } else {
            // First occurrence, add to hashmap
            insert(&map, current->data);
            prev = current;
            current = current->next;
        }
    }
    
    freeHashMap(&map);
}

// Alternative approach: Create new list without duplicates
ListNode* removeDuplicatesNewList(ListNode* head) {
    if (head == NULL) {
        return NULL;
    }
    
    HashMap map;
    initHashMap(&map);
    
    ListNode* newHead = NULL;
    ListNode* current = head;
    
    while (current != NULL) {
        if (!contains(&map, current->data)) {
            // First occurrence, add to new list and hashmap
            insert(&map, current->data);
            insertAtTail(&newHead, current->data);
        }
        current = current->next;
    }
    
    freeHashMap(&map);
    return newHead;
}

// Print linked list
void printList(ListNode* head) {
    ListNode* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Free linked list memory
void freeList(ListNode* head) {
    ListNode* current = head;
    while (current != NULL) {
        ListNode* temp = current;
        current = current->next;
        free(temp);
    }
}

// Count nodes in linked list
int countNodes(ListNode* head) {
    int count = 0;
    ListNode* current = head;
    while (current != NULL) {
        count++;
        current = current->next;
    }
    return count;
}

int main() {
    // Test 1: In-place removal
    printf("=== Test 1: In-place duplicate removal ===\n");
    ListNode* list1 = NULL;
    
    // Create list: 4 -> 2 -> 5 -> 4 -> 3 -> 2 -> 8 -> 3 -> 1 -> 5
    int data1[] = {4, 2, 5, 4, 3, 2, 8, 3, 1, 5};
    int n1 = sizeof(data1) / sizeof(data1[0]);
    
    for (int i = 0; i < n1; i++) {
        insertAtTail(&list1, data1[i]);
    }
    
    printf("Original list: ");
    printList(list1);
    printf("Original count: %d\n", countNodes(list1));
    
    removeDuplicates(&list1);
    
    printf("After removing duplicates: ");
    printList(list1);
    printf("New count: %d\n", countNodes(list1));
    
    freeList(list1);
    
    // Test 2: Create new list approach
    printf("\n=== Test 2: Create new list approach ===\n");
    ListNode* list2 = NULL;
    
    // Create list: 1 -> 2 -> 1 -> 3 -> 2 -> 4 -> 3 -> 5
    int data2[] = {1, 2, 1, 3, 2, 4, 3, 5};
    int n2 = sizeof(data2) / sizeof(data2[0]);
    
    for (int i = 0; i < n2; i++) {
        insertAtTail(&list2, data2[i]);
    }
    
    printf("Original list: ");
    printList(list2);
    printf("Original count: %d\n", countNodes(list2));
    
    ListNode* newList = removeDuplicatesNewList(list2);
    
    printf("New list without duplicates: ");
    printList(newList);
    printf("New count: %d\n", countNodes(newList));
    
    freeList(list2);
    freeList(newList);
    
    // Test 3: Edge cases
    printf("\n=== Test 3: Edge cases ===\n");
    
    // Empty list
    ListNode* emptyList = NULL;
    printf("Empty list test:\n");
    removeDuplicates(&emptyList);
    printf("After removal: ");
    printList(emptyList);
    
    // Single element
    ListNode* singleList = createNode(42);
    printf("Single element test: ");
    printList(singleList);
    removeDuplicates(&singleList);
    printf("After removal: ");
    printList(singleList);
    freeList(singleList);
    
    // All duplicates
    ListNode* dupList = NULL;
    for (int i = 0; i < 5; i++) {
        insertAtTail(&dupList, 7);
    }
    printf("All duplicates test: ");
    printList(dupList);
    removeDuplicates(&dupList);
    printf("After removal: ");
    printList(dupList);
    freeList(dupList);
    
    return 0;
}
